@page "/product"
@inject ILogger<Products> logger;
@inject IProductService _productService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 
@inject IToastService toastService
@inject SweetAlertService Swal


<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products"/>
<button title="Add Product" id="btn-add-product" class="btn mb-2" @onclick="@(()=>NavigationManager.NavigateTo("/addproduct"))">+</button>

@if(products.Count() > 0){
    <div class="products-container">
        @foreach (var product in products)
        {
             <div class="card">
                <img src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210" class="card-img-top">
                <div class="card-body">
                    <h4>
                        <b>@product.Title</b>
                    </h4>
                    <p>@product.Price?.ToString("C")</p>
                </div>
                <div class="row">

                <button title="Edit" class="btn btn-link col-lg-6 col-12" @onclick="@(() => EditProduct(product))">
                    Edit <span class="oi oi-pencil"></span></button>
                <button title="Delete" class="btn btn-link btn-delete btn-delete-product  col-lg-6 col-12" 
                @onclick="@(() => DeleteProduct(product))"> Delete <span class="oi oi-trash"></span></button>
                </div>

            </div> 
        }
    </div>
}
else{
    <p>No hay productos para mostrar</p>
}


@code
{
    private List<Product> products = new List<Product>();

protected override async Task OnInitializedAsync()
{
     await GetProducts();
}
  
    
    private async Task GetProducts()
        {
            products = await _productService.Get();
        }

    private async Task EditProduct(Product product){
            NavigationManager.NavigateTo($"/editproduct?Id={product.Id}");
    }

    private async Task DeleteProduct(Product product){

            SweetAlertResult  result = await Swal.FireAsync(new SweetAlertOptions{
                Title="Confirm",
                Text=$"Are you sure you want to remove {product.Title}?",
                Icon=SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, I want",
                CancelButtonText="No, cancel"
            });

            if (!string.IsNullOrEmpty(result.Value))
            {
                await _productService.Delete(product.Id);
                toastService.ShowSuccess("Deleted Product");
                await GetProducts();
            }
            else if (result.Dismiss == DismissReason.Cancel)
            {
                await Swal.FireAsync(
                "Cancelled",
                "Your product is safe :)",
                SweetAlertIcon.Error
            );
            }
            }
}

